@page "/order/details/{Id:int}"
@inject IOrderHeaderRpository _orderHeaderRpository
@inject IJSRuntime _Js
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IShoppingCartRepository _shoppingCartRepository

@using YumBlazor.Utilities
@using System.Globalization


@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
            <img src="/Images/loading.gif" alt="loading.." />
        </div>
    </div>
}
else
{
    <div class="container my-5 mx-auto p-5 w-100" style="max-width: 950px;">
        <div class="card" style="max-width: 750px;">
            <div class="pt-3 text-success text-center">
                <span class="h4"> ORDER DETAILS</span>
            </div>

            <hr />
            <div class="px-3">
                <p>Order Id:@OrderHeader.Id</p>
                <p>Name:@OrderHeader.Name</p>
                <p>Email:@OrderHeader.Email </p>
                <p>Phone:@OrderHeader.PhoneNumber </p>
                <p>Order Status:@OrderHeader.Status  </p>
            </div>
            <hr />
            <div class="card-body">
                <h4 class="text-success">Menu Items</h4>
                @foreach (var details in OrderHeader.OrderDetails)
                {
                    <div class="d-flex">
                        <div class="d-flex w-100 justify-content-between">
                            <p>
                                &nbsp;@details.ProductName
                            </p>
                            <p>
                                @details.Price.ToString("C", CultureInfo.GetCultureInfo("en-us")) X @details.Count =
                            </p>
                        </div>
                        <div class="ps-4">
                            @((details.Price * @details.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))
                        </div>

                    </div>
                }

                <hr />
                <h4 class="text-success text-end">
                    @OrderHeader.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                </h4>
                <hr />

                <div class="row">
                    <div class="col-5">
                        <a href="order/list" class="btn btn-secondary  m-2 p-2" style="width:150px;">Back to Orders</a>
                    </div>
                    <div class="col-7 text-end">
                        @if (OrderHeader.Status != SD.StatusCanceled && OrderHeader.Status != SD.StatusCompleted &&
                       _authenticationStateProvider.GetAuthenticationStateAsync().GetAwaiter().GetResult().User?.IsInRole(SD.Admin_Role)==true)
                        {
                            <button class="btn btn-danger m-2 p-2" @onclick="()=>UpdateStatus(SD.StatusCanceled)" style=" width:150px;">Cancelled</button>
                            @if (OrderHeader.Status ==SD.StatusPending)
                            {
                                <button class="btn btn-primary m-2 p-2" @onclick="()=>UpdateStatus(SD.StatusReadyForPickUp)" style=" width:150px;">Ready for Pickup</button>
                            }
                            @if (OrderHeader.Status ==SD.StatusReadyForPickUp)
                            {
                                <button class="btn btn-success m-2 p-2" @onclick="()=>UpdateStatus(SD.StatusCompleted)" style="width:150px;">Completed</button>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>



}
@code {

    private bool IsProcessing = true;
    private OrderHeader OrderHeader { get; set; } = new OrderHeader();
    [Parameter]
    public int Id { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //IsProcessing = true;
            //await Task.Delay(2000);
            await LoadOrder();
            IsProcessing = false;
            StateHasChanged();

        }
    }
    protected async Task<OrderHeader> LoadOrder()
    {
        OrderHeader = await _orderHeaderRpository.GetAsync(Id);
        return OrderHeader;
    }
    private async Task UpdateStatus(string newStatus)
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        await _orderHeaderRpository.UpdateStatusAsync(newStatus,Id,"");
        await _shoppingCartRepository.ClearCartAsync(user?.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value);
        await _Js.ToastrSuccess("Status updated successfully :)");
    }
}
