@page "/product"
@inject IProductRepository _ProductRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _Js

<DeleteModal ButtonBootstrapStyle="btn btn-danger"
             ButtonText="Delete"
             Title="Are you sure you want to delete this product"
             OnModalconfirmation="ConfirmDelete">
</DeleteModal>
<div class="card">
    <div class="card-title">
        <h3 class="text-center bg-gradient bg-black text-white opacity-20 p-5">Product List</h3>
    </div>
    <div class="card-body">
        <a href="product-create" class="btn btn-primary"><i class="bi bi-plus"></i> Add new Product</a>
        <table class="table table-striped table-bordered">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Price</th>
                    <th>Edit \ Delete</th>
                </tr>
            </thead>
            @if (IsProcessing)
            {
                <tr>
                    <p class="text-center">loading...</p>
                </tr>
            }
            <tbody>
                
                @foreach (var product in Products)
                {
                    <tr>
                        <td>@product.Id</td>
                        <td>@product.Name</td>
                        <td>@product.Description</td>
                        <td>@product.Category.Name</td>
                        <td>@product.Price.ToString("c")</td>
                        <td>
                            <a href="@($"product-edit/{product.Id}")" class="btn btn-primary"><i class="bi bi-pencil-square"></i>Edit</a>
                            <button @onclick="()=>HandleDelete(product.Id)" class="btn btn-danger"><i class="bi bi-trash"></i>Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
@code {
    private bool IsProcessing = true;
    public IEnumerable<Product> Products { get; set; } = new List<Product>();
    public int ProductId { get; set; }
    private async Task<IEnumerable<Product>> GetProducts()
    {
        Products = await _ProductRepository.GetAllAsync();
        return Products;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsProcessing = true;
            await Task.Delay(2000);
            await GetProducts();
            IsProcessing = false;
            StateHasChanged();

        }
    }
    // private async Task HandleDelete(int id)
    // {

    //     //await _ProductRepository.DeleteAsync(id);
    //     ProductId = id;
    //     await _Js.InvokeVoidAsync("ShowConfimationModal");

        // await js.ToastrSuccess("Product delete successfully");
        // nav.NavigateTo("product", forceLoad: true);

    //}

    protected async Task HandleDelete(int id)
    {
        ProductId = id;
        await _Js.InvokeVoidAsync("ShowConfimationModal");
    }
    protected async Task ConfirmDelete(bool isConfirmed)
    {
        IsProcessing = true;
        await _Js.InvokeVoidAsync("HideConfimationModal");
        if (isConfirmed && ProductId != 0)
        {
            var result = await _ProductRepository.DeleteAsync(ProductId);
            if (result)
            {
                await _Js.ToastrSuccess("product deleted successfully :)");
                //_navigationManager.NavigateTo("category");
            }
            else
            {
                await _Js.ToastrError("Error.......");
            }
        }
        ProductId = 0;
        IsProcessing = false;
        await GetProducts();
    }
}
