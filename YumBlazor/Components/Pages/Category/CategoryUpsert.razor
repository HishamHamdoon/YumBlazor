@using YumBlazor.Data
@inject YumBlazor.Repository.IRepository.ICategoryRepository _categoryRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _Js


@page "/category-create"
@page "/category-update/{id:int}"
@* <h3>@(Id==0?"Create" :"Update") Category</h3> *@

@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <p>loading...</p>
    </div>
}
else
{
    <div class="card border-0 shadow mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3 ">
            <div class="row">
                <div class="text-center col-12">
                    <h2 class="text-white py-2 ">@(Id == 0 ? "Create" : "Update") Category</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4 ">
            <EditForm Model="Category" FormName="CategoryUpsert" OnValidSubmit="UpsertCategory">
                <DataAnnotationsValidator />
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText @bind-Value="Category.Name" class="form-control" id="name"> </InputText>
                        <label for="Name">Name</label>
                        <ValidationMessage For="@(()=>Category.Name)"></ValidationMessage>
                    </div>
                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-save"></i>Save
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                           
                            <button type="submit" class="btn btn-primary form-control" disabled="@IsProcessing">
                                <i class="bi bi-arrow-bar-left"></i>Back
                            </button>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>

    </div>
}
@code {
    [Parameter]
    public int Id { get; set; }
    [SupplyParameterFromForm]
    private Category Category { get; set; } = new Category();
    private bool IsProcessing = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IsProcessing = true;
            //await Task.Delay(2000);
            await LoadCategory();
            IsProcessing = false;
            StateHasChanged();
        }
    }
    private async Task LoadCategory()
    {
        if (Id > 0)
        {
            Category = await _categoryRepository.GetAsync(Id);
        }
    }
    private async Task UpsertCategory()
    {
        IsProcessing = true;
        if (Category.Id ==0)
        {
            //create
            await _categoryRepository.CreateAsync(Category);
            await _Js.ToastrSuccess("Category created successfully :)");
            //_navigationManager.NavigateTo("category");
        }
        else
        {
            //update 
            await _categoryRepository.UpdateAsync(Category);
            await _Js.ToastrSuccess("Category updated successfully :)");
            //_navigationManager.NavigateTo("category");
        }
        IsProcessing = false;
        _navigationManager.NavigateTo("category");
    }
}




