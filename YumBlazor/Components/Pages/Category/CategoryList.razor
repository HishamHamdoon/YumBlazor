@page "/category"
@inject YumBlazor.Repository.IRepository.ICategoryRepository _categoryRepository
@using YumBlazor.Data
@inject IJSRuntime _Js
@inject NavigationManager _navigationManager
<DeleteModal OnModalconfirmation="ConfirmDelete" 
Title="Are you sure you want to delete this category"
ButtonText="Delete"
ButtonBootstrapStyle="btn-danger">

</DeleteModal> 
@if (IsProcessing)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <p>loading...</p>
    </div>
}
else
{
    <div class="card border-0 shadow mt-4">
        <div class="card-header bg-black bg-gradient m-lg-0 py-3 ">
            <div class="row">
                <div class="text-center col-12">
                    <h2 class="text-white py-2 ">Category List</h2>

                </div>
            </div>
        </div>
        <div class="card-body p-4 ">
            <div class="row pb-3">
                <div class="col-12 text-end">
                    <a href="category-create" class="btn btn-secondary btn-lg" style="width:250px;"><i class="bi bi-plus"></i>Add new category</a>
                </div>
            </div>
            @if (Categories.Any())
            {
                <table class="table table-bordered table-striped ">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in Categories)
                        {
                            <tr>
                                <td>@obj.Name</td>
                                <td>
                                    <a href="@($"category-update/{obj.Id}")" class="btn btn-primary"><i class="bi bi-pencil-square"></i>Edit</a>
                                    <a  class="btn btn-danger" @onclick="()=>HandleDelete(obj.Id)"><i class="bi bi-trash"></i>Delete</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
        
    </div>
}
@code {
    private bool IsProcessing = true;
    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    public int DeleteCategoryID { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //IsProcessing = true;
            //await Task.Delay(2000);
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();

        }
    }
    protected async Task<IEnumerable<Category>> LoadCategories()
    {
        Categories = await _categoryRepository.GetAllAsync();
        return Categories;
    }
    protected async Task HandleDelete(int id)
    {
        DeleteCategoryID = id;
        await _Js.InvokeVoidAsync("ShowConfimationModal");
    }

    protected async Task ConfirmDelete(bool isConfirmed)
    {
        IsProcessing = true;
        await _Js.InvokeVoidAsync("HideConfimationModal");
        if (isConfirmed && DeleteCategoryID != 0)
        {
            var result =await _categoryRepository.DeleteAsync(DeleteCategoryID);
            if (result)
            {
                await _Js.ToastrSuccess("Category deleted successfully :)");
                _navigationManager.NavigateTo("category");
            }
            else
            {
                await _Js.ToastrError("Error.......");
            }
        }
        DeleteCategoryID = 0;
        IsProcessing = false;
        await LoadCategories();
    }
}
