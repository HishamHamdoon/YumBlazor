@using YumBlazor.Data
@inject IProductRepository _productRepository
@inject ICategoryRepository _categoryRepository
@inject IShoppingCartRepository _iShoppingCartRepository
@inject AuthenticationStateProvider _authenticationStateProvider;
@inject NavigationManager _navigationManager
@inject SharedStateService _sharedStateService

@inject IJSRuntime _Js
@page "/"

 @if (IsProcessing)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/Images/loading.gif" />
    </div>
} 
<PageTitle>Home</PageTitle>
<div class="container-fluid px-0 m-0 full-width">
    <div class="jumbotron-custom">
        <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

            <div class="d-flex align-items-center" style="width: 100%;">
                <input type="text" class="form-control rounded-pill" @bind:event="oninput" @bind:get="Text" @bind:set="FilterProductByName"
                       placeholder="Search for Food Items!"
                       style="width: 100%; padding: 20px;">
                <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
            </div>
        </div>
    </div>

    <div class="content px-4 m-2">
        <ul class="nav nav-underline justify-content-center mb-2">
            <li class="nav-item">
                <span class="nav-link @GetActiveCategory(0)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(0)">All</span>
            </li>
            @foreach (var category in Categories)

            {
                <li class="nav-item">
                    <span class="nav-link @GetActiveCategory(category.Id)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(category.Id)">@category.Name</span>
                </li>
            }
            
        </ul>
        <div class="row mt-4 mx-1">
        @foreach (var product  in FilteredProducts)
        {
                <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                    <div class="card">
                        <div class="mt-3 mb-2 row">
                            <div class="col-6 px-3">
                                <i class="bi bi-star btn btn-outline-success disabled"> SpecialTag</i>
                            </div>
                            <div class="col-6 text-end px-3">
                                @product.Price
                            </div>
                        </div>
                        <div class="text-center">
                        @if (product.ImageUrl != null)
                            {
                                <img src="@product.ImageUrl" class="card-img-top img-thumbnail img-rounded w-50 mt-2" style="">
                            }
                            else
                            {
                               <img src="/Images/default.png" class="card-img-top img-thumbnail img-rounded w-50 mt-2" style="">
                            }
                        </div>
                        <div class="card-body">
                            <h5 class="card-title text-center lead text-success">@product.Name</h5>
                            <h4 class="text-center">
                                <div class="m-lg-auto p-2" @onclick="()=>AddItemToCart(product)">
                                    <i class="bi bi-cart3 btn btn-success text-right  px-5" style="width:300px"> Add to cart</i>
                                </div>
                            </h4>
                            <p class="card-text mt-2">@product.Description</p>

                        </div>
                    </div>
                </div>
        }
        </div>
    </div>
</div>
 
@code{
    //protected void onin
    private bool IsProcessing = true;
    private IEnumerable<YumBlazor.Data.Category> Categories { get; set; } = new List<YumBlazor.Data.Category>();
    private IEnumerable<YumBlazor.Data.Product> Products { get; set; } = new List<YumBlazor.Data.Product>();
    private IEnumerable<YumBlazor.Data.Product> FilteredProducts { get; set; } = new List<YumBlazor.Data.Product>();
    public int DeleteCategoryID { get; set; }
    public int SelectedCategoryID { get; set; }
    public string? Text { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //IsProcessing = true;
            //await Task.Delay(2000);
            await LoadCategories();
            await LoadProducts();
            FilterProducts(0);
            IsProcessing = false;
            StateHasChanged();

        }
    }
    private async Task<IEnumerable<YumBlazor.Data.Category>> LoadCategories()
    {
        Categories = await _categoryRepository.GetAllAsync();
        return Categories;
    }

    private async Task<IEnumerable<YumBlazor.Data.Category>> LoadProducts()
    {
        Products = await _productRepository.GetAllAsync();
        return Categories;

    }

    void FilterProducts(int CategoryId)
    {
        if (CategoryId ==0)
        {
            FilteredProducts = Products;
            SelectedCategoryID = CategoryId;
            return;
        }
        else
        {
            FilteredProducts = Products.Where(x => x.CategoryId == CategoryId).ToList();
            SelectedCategoryID = CategoryId;
            Text = string.Empty; 


        }
    }
    void FilterProductByName(string searchText)
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            FilteredProducts = Products;
        }else{
            FilteredProducts = Products
            .Where(u => u.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        Text = searchText;
    }
    private string GetActiveCategory(int categoryId)
    {
        return categoryId == SelectedCategoryID ? "active" : string.Empty;
    }
    //add item to product
    private async Task AddItemToCart(YumBlazor.Data.Product product)
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;
        if (!authenticated)
        {
            _navigationManager.NavigateTo("account/login");
        }
        else
        {
            //add item to cart
            var result = await _iShoppingCartRepository.UpdateCartAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value, product.Id, 1);
            _sharedStateService.TotalCartCount = await _iShoppingCartRepository.GetTotalCartcountAsync(userId);

            if (result)
            {
                _Js.ToastrSuccess("card updated successfully :)");
            }
        }

    }
}
